/*
Copyright Damian KÄ™ska.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-cicd/pipelines-feedback-core/pkgs/apis/pipelinesfeedback.keskad.pl/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PFConfigLister helps list PFConfigs.
// All objects returned here must be treated as read-only.
type PFConfigLister interface {
	// List lists all PFConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PFConfig, err error)
	// PFConfigs returns an object that can list and get PFConfigs.
	PFConfigs(namespace string) PFConfigNamespaceLister
	PFConfigListerExpansion
}

// pFConfigLister implements the PFConfigLister interface.
type pFConfigLister struct {
	indexer cache.Indexer
}

// NewPFConfigLister returns a new PFConfigLister.
func NewPFConfigLister(indexer cache.Indexer) PFConfigLister {
	return &pFConfigLister{indexer: indexer}
}

// List lists all PFConfigs in the indexer.
func (s *pFConfigLister) List(selector labels.Selector) (ret []*v1alpha1.PFConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PFConfig))
	})
	return ret, err
}

// PFConfigs returns an object that can list and get PFConfigs.
func (s *pFConfigLister) PFConfigs(namespace string) PFConfigNamespaceLister {
	return pFConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PFConfigNamespaceLister helps list and get PFConfigs.
// All objects returned here must be treated as read-only.
type PFConfigNamespaceLister interface {
	// List lists all PFConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PFConfig, err error)
	// Get retrieves the PFConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PFConfig, error)
	PFConfigNamespaceListerExpansion
}

// pFConfigNamespaceLister implements the PFConfigNamespaceLister
// interface.
type pFConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PFConfigs in the indexer for a given namespace.
func (s pFConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PFConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PFConfig))
	})
	return ret, err
}

// Get retrieves the PFConfig from the indexer for a given namespace and name.
func (s pFConfigNamespaceLister) Get(name string) (*v1alpha1.PFConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pfconfig"), name)
	}
	return obj.(*v1alpha1.PFConfig), nil
}
